<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Language on YenTing Chen</title>
    <link>http://example.org/tags/programming-language/</link>
    <description>Recent content in Programming Language on YenTing Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 May 2019 23:47:44 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/tags/programming-language/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust Lang at a Glance</title>
      <link>http://example.org/posts/2019/05/28/rust-lang-at-a-glance/</link>
      <pubDate>Tue, 28 May 2019 23:47:44 +0800</pubDate>
      
      <guid>http://example.org/posts/2019/05/28/rust-lang-at-a-glance/</guid>
      <description>Just a quick glance at Rust-lang, haven’t really done things with it. But I’m interested in its memory management system, so called “ownership”, and no “null” design.
Rust, borned in 2006, was firstly a personal project but then sponsored by Mozilla since 2009. It’s a compiled language and is known for its compilation time check.
There are two popular approaches of memory managements in modern programming languages. The first one is you, the developer, explicit allocate and deallocate them.</description>
    </item>
    
  </channel>
</rss>