<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Jim Chen</title><link>https://jimytc.com/tags/javascript/</link><description>Recent content in javascript on Jim Chen</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 27 Mar 2021 08:40:22 +0800</lastBuildDate><atom:link href="https://jimytc.com/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Typescript Array.map 後的型別推論技巧 - type predicate</title><link>https://jimytc.com/posts/2021/03/27/qnote_on_using_type_predicates/</link><pubDate>Sat, 27 Mar 2021 08:40:22 +0800</pubDate><guid>https://jimytc.com/posts/2021/03/27/qnote_on_using_type_predicates/</guid><description>在集合或陣列類型的資料處理中，偶爾會遇到需要使用 Array.map 把所需要的資料從物件中轉化成另一個陣列物件。 例如
class Foo { bar?: number } let foos: Foo[]; fooArray = [ new Foo(123), new Foo() ]; let bars = foos.map(f =&amp;gt; f.bar) 在 tsconfig.json 中開啟 &amp;quot;strict&amp;quot;: true 或者 &amp;quot;strictNullChecks&amp;quot;: true 的情形下。 bars 會被推論成是 (number | undefined)[]。</description></item><item><title>TypeScript 上手二三事</title><link>https://jimytc.com/posts/2021/02/05/qnote_on_adapting_typescript/</link><pubDate>Fri, 05 Feb 2021 16:06:10 +0800</pubDate><guid>https://jimytc.com/posts/2021/02/05/qnote_on_adapting_typescript/</guid><description>經歷過 Java, Ruby, JavaScript(咦?)，最近因為職涯的轉換開始上手 TypeScript。 簡單說 TypeScript 就是 JavaScript 的超集，最大的好處是加強了型別系統。 上手的過程使用了 91 (Joey Chen) 極速開發帶領的 Tennis Kata 練習。
明確的主題可以練習，不會漫無目的的從頭開始學。 新的語言有新的工具鍊，必須要有基本使用的能力。 承 2，我希望可以最快速的達到我在 Ruby 環境的純 coding 戰力。 目前的感受
用了一個主題上手真的比較精準和快速，簡單說就是作中學。 多了編譯的過程貌似會慢一點點（ TypeScript -&amp;gt; JavaScript -&amp;gt; run Test）。 內建型別推論（Type Inference）在多數情形下可以不去註記型別。 承 3，但是對於某些特別用途，例如 dictionary，就必須要記得註記他。 因為 3 跟 4，反而在寫程式的時候需要特別去思考要不要作型別註記，覺得會有一點額外耗腦。</description></item></channel></rss>